daemon                              off;
pcre_jit                            on;
timer_resolution                    100ms;
worker_processes                    {* os.getenv'WORKERS' or 'auto' *};
pid                                 /var/run/openresty/nginx.pid;

error_log                           stderr  {* os.getenv'ERROR_LOG_LEVEL' or 'info' *};

events  {
    worker_connections              {* os.getenv'WORKER_CONNECTIONS' or 1024 *};
}

http  {
    gzip                            on;
    access_log                      off;

    include                         /etc/nginx/log.conf;
    include                         /etc/nginx/ssl.conf;
    include                         /etc/nginx/types.conf;

    sendfile                        on;
    tcp_nopush                      on;
    tcp_nodelay                     on;
    server_tokens                   off;
    reset_timedout_connection       on;

    send_timeout                    15;
    keepalive_timeout               75;
    client_body_timeout             15;
    client_max_body_size            {* os.getenv'CLIENT_MAX_BODY_SIZE' or '1m' *};
    client_body_buffer_size         {* os.getenv'CLIENT_BODY_BUFFER_SIZE' or '1m' *};
    client_body_temp_path           /tmp/nginx-client-body;
    proxy_temp_path                 /tmp/nginx-proxy;
    resolver_timeout                5s;
    resolver                        {* os.getenv'RESOLVER' or '127.0.0.11' *}  valid=60s  ipv6=off;

    lua_code_cache                  {* os.getenv'LUA_CODE_CACHE' or 'on' *};
    lua_socket_pool_size            {* os.getenv'LUA_SOCKET_POOL_SIZE' or 2048 *};
    lua_socket_log_errors           off;
    lua_ssl_verify_depth            2;
    lua_ssl_trusted_certificate     /etc/ssl/certs/ca-certificates.crt;

    init_by_lua_block  {
        ngx.ACME_EMAIL = '{* os.getenv"ACME_EMAIL" or "" *}';
        ngx.SERVER_NAME = '{* os.getenv"SERVER_NAME" or "" *}';

        if ngx.SERVER_NAME ~= '' and ngx.ACME_EMAIL ~= '' then
            require'resty.acme.autossl'.init{
                account_email = ACME_EMAIL,
                account_key_path = '/etc/nginx/pem/account_key.pem',
                domain_whitelist = { ngx.SERVER_NAME },
                domain_key_types = { 'rsa', 'ecc' },
                storage_config = { dir = '/etc/nginx/cert' },
                storage_adapter = 'file',
                tos_accepted = true,
                staging = false,
            };
        end
    }

    init_worker_by_lua_block  {
        if ngx.ACME_EMAIL then
            require'resty.acme.autossl'.init_worker();
        end
    }

    upstream  hasura  {
        server      hasura:8080;
        keepalive   {* os.getenv'HASURA_KEEPALIVE' or 2 *};
    }

    upstream  tentura  {
        server      tentura:2080;
        keepalive   {* os.getenv'TENTURA_KEEPALIVE' or 2 *};
    }

    map  $http_upgrade  $connection_upgrade  {
        default                     upgrade;
        ''                          close;
    }

    server  {
        listen                      80;

        include                     /etc/nginx/acme.conf;

        location  /  {
            return  301  https://$host$request_uri;
        }        
    }

    server  {
        http2                       on;
        listen                      443  ssl;

        access_log                  /dev/stdout  json;

        ssl_certificate_by_lua_block  {
            if ngx.ACME_EMAIL then
                require'resty.acme.autossl'.ssl_certificate();
            end
        }

        include                     /etc/nginx/acme.conf;

        location  /api/  {
            proxy_connect_timeout   1h;
            proxy_read_timeout      1h;
            proxy_send_timeout      1h;
            proxy_http_version      1.1;
            proxy_set_header        Upgrade  $http_upgrade;
            proxy_set_header        Connection  $connection_upgrade;
            proxy_pass              http://hasura/;
        }

        location  /api/user/  {
            proxy_http_version      1.1;
            proxy_pass              http://tentura;
        }

        location  /shared/  {
            # TODO: cache
            proxy_http_version      1.1;
            proxy_pass              http://tentura;
        }

        location  /  {
            etag                    on;
            expires                 modified  {* os.getenv'CONTENT_EXPIRES' or '+1d' *};
            add_header              Cross-Origin-Opener-Policy  "same-origin";
            add_header              Cross-Origin-Embedder-Policy  "credentialless";
        }
    }
}
