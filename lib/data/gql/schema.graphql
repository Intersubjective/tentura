schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

type Address {
  ISO31662lvl15: String
  ISO31662lvl4: String
  city: String
  city_district: String
  commercial: String
  country: String
  country_code: String
  region: String
  state: String
  suburb: String
}

"""
columns and relationships of "beacon"
"""
type beacon {
  """An object relationship"""
  author: user!

  """An array relationship"""
  beacon_hiddens(
    """distinct select on columns"""
    distinct_on: [beacon_hidden_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_hidden_order_by!]

    """filter the rows returned"""
    where: beacon_hidden_bool_exp
  ): [beacon_hidden!]!

  """An aggregate relationship"""
  beacon_hiddens_aggregate(
    """distinct select on columns"""
    distinct_on: [beacon_hidden_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_hidden_order_by!]

    """filter the rows returned"""
    where: beacon_hidden_bool_exp
  ): beacon_hidden_aggregate!
  beacon_in_my_field(hidePersonal: Boolean, limit: Int, where: NodeScoreWhereInput): [NodeScore!]!

  """An array relationship"""
  beacon_pinneds(
    """distinct select on columns"""
    distinct_on: [beacon_pinned_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_pinned_order_by!]

    """filter the rows returned"""
    where: beacon_pinned_bool_exp
  ): [beacon_pinned!]!

  """An aggregate relationship"""
  beacon_pinneds_aggregate(
    """distinct select on columns"""
    distinct_on: [beacon_pinned_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_pinned_order_by!]

    """filter the rows returned"""
    where: beacon_pinned_bool_exp
  ): beacon_pinned_aggregate!

  """An array relationship"""
  comments(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): [comment!]!

  """An aggregate relationship"""
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): comment_aggregate!
  comments_count: Int!
  created_at: timestamptz!
  description: String!
  enabled: Boolean!
  has_picture: Boolean!
  id: String!

  """
  A computed field, executes function "beacon_get_is_hidden"
  """
  is_hidden: Boolean

  """
  A computed field, executes function "beacon_get_is_pinned"
  """
  is_pinned: Boolean
  lat: float8
  long: float8

  """
  A computed field, executes function "beacon_get_my_vote"
  """
  my_vote: Int
  timerange: tstzrange
  title: String!
  updated_at: timestamptz!
  user_id: String!

  """An array relationship"""
  vote_beacons(
    """distinct select on columns"""
    distinct_on: [vote_beacon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_beacon_order_by!]

    """filter the rows returned"""
    where: vote_beacon_bool_exp
  ): [vote_beacon!]!

  """An aggregate relationship"""
  vote_beacons_aggregate(
    """distinct select on columns"""
    distinct_on: [vote_beacon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_beacon_order_by!]

    """filter the rows returned"""
    where: vote_beacon_bool_exp
  ): vote_beacon_aggregate!
}

"""
aggregated selection of "beacon"
"""
type beacon_aggregate {
  aggregate: beacon_aggregate_fields
  nodes: [beacon!]!
}

input beacon_aggregate_bool_exp {
  avg: beacon_aggregate_bool_exp_avg
  bool_and: beacon_aggregate_bool_exp_bool_and
  bool_or: beacon_aggregate_bool_exp_bool_or
  corr: beacon_aggregate_bool_exp_corr
  count: beacon_aggregate_bool_exp_count
  covar_samp: beacon_aggregate_bool_exp_covar_samp
  max: beacon_aggregate_bool_exp_max
  min: beacon_aggregate_bool_exp_min
  stddev_samp: beacon_aggregate_bool_exp_stddev_samp
  sum: beacon_aggregate_bool_exp_sum
  var_samp: beacon_aggregate_bool_exp_var_samp
}

input beacon_aggregate_bool_exp_avg {
  arguments: beacon_select_column_beacon_aggregate_bool_exp_avg_arguments_columns!
  distinct: Boolean
  filter: beacon_bool_exp
  predicate: float8_comparison_exp!
}

input beacon_aggregate_bool_exp_bool_and {
  arguments: beacon_select_column_beacon_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: beacon_bool_exp
  predicate: Boolean_comparison_exp!
}

input beacon_aggregate_bool_exp_bool_or {
  arguments: beacon_select_column_beacon_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: beacon_bool_exp
  predicate: Boolean_comparison_exp!
}

input beacon_aggregate_bool_exp_corr {
  arguments: beacon_aggregate_bool_exp_corr_arguments!
  distinct: Boolean
  filter: beacon_bool_exp
  predicate: float8_comparison_exp!
}

input beacon_aggregate_bool_exp_corr_arguments {
  X: beacon_select_column_beacon_aggregate_bool_exp_corr_arguments_columns!
  Y: beacon_select_column_beacon_aggregate_bool_exp_corr_arguments_columns!
}

input beacon_aggregate_bool_exp_count {
  arguments: [beacon_select_column!]
  distinct: Boolean
  filter: beacon_bool_exp
  predicate: Int_comparison_exp!
}

input beacon_aggregate_bool_exp_covar_samp {
  arguments: beacon_aggregate_bool_exp_covar_samp_arguments!
  distinct: Boolean
  filter: beacon_bool_exp
  predicate: float8_comparison_exp!
}

input beacon_aggregate_bool_exp_covar_samp_arguments {
  X: beacon_select_column_beacon_aggregate_bool_exp_covar_samp_arguments_columns!
  Y: beacon_select_column_beacon_aggregate_bool_exp_covar_samp_arguments_columns!
}

input beacon_aggregate_bool_exp_max {
  arguments: beacon_select_column_beacon_aggregate_bool_exp_max_arguments_columns!
  distinct: Boolean
  filter: beacon_bool_exp
  predicate: float8_comparison_exp!
}

input beacon_aggregate_bool_exp_min {
  arguments: beacon_select_column_beacon_aggregate_bool_exp_min_arguments_columns!
  distinct: Boolean
  filter: beacon_bool_exp
  predicate: float8_comparison_exp!
}

input beacon_aggregate_bool_exp_stddev_samp {
  arguments: beacon_select_column_beacon_aggregate_bool_exp_stddev_samp_arguments_columns!
  distinct: Boolean
  filter: beacon_bool_exp
  predicate: float8_comparison_exp!
}

input beacon_aggregate_bool_exp_sum {
  arguments: beacon_select_column_beacon_aggregate_bool_exp_sum_arguments_columns!
  distinct: Boolean
  filter: beacon_bool_exp
  predicate: float8_comparison_exp!
}

input beacon_aggregate_bool_exp_var_samp {
  arguments: beacon_select_column_beacon_aggregate_bool_exp_var_samp_arguments_columns!
  distinct: Boolean
  filter: beacon_bool_exp
  predicate: float8_comparison_exp!
}

"""
aggregate fields of "beacon"
"""
type beacon_aggregate_fields {
  avg: beacon_avg_fields
  count(columns: [beacon_select_column!], distinct: Boolean): Int!
  max: beacon_max_fields
  min: beacon_min_fields
  stddev: beacon_stddev_fields
  stddev_pop: beacon_stddev_pop_fields
  stddev_samp: beacon_stddev_samp_fields
  sum: beacon_sum_fields
  var_pop: beacon_var_pop_fields
  var_samp: beacon_var_samp_fields
  variance: beacon_variance_fields
}

"""
order by aggregate values of table "beacon"
"""
input beacon_aggregate_order_by {
  avg: beacon_avg_order_by
  count: order_by
  max: beacon_max_order_by
  min: beacon_min_order_by
  stddev: beacon_stddev_order_by
  stddev_pop: beacon_stddev_pop_order_by
  stddev_samp: beacon_stddev_samp_order_by
  sum: beacon_sum_order_by
  var_pop: beacon_var_pop_order_by
  var_samp: beacon_var_samp_order_by
  variance: beacon_variance_order_by
}

"""
input type for inserting array relation for remote table "beacon"
"""
input beacon_arr_rel_insert_input {
  data: [beacon_insert_input!]!

  """upsert condition"""
  on_conflict: beacon_on_conflict
}

"""aggregate avg on columns"""
type beacon_avg_fields {
  comments_count: Float
  lat: Float
  long: Float

  """
  A computed field, executes function "beacon_get_my_vote"
  """
  my_vote: Int
}

"""
order by avg() on columns of table "beacon"
"""
input beacon_avg_order_by {
  comments_count: order_by
  lat: order_by
  long: order_by
}

"""
Boolean expression to filter rows from the table "beacon". All fields are combined with a logical 'AND'.
"""
input beacon_bool_exp {
  _and: [beacon_bool_exp!]
  _not: beacon_bool_exp
  _or: [beacon_bool_exp!]
  author: user_bool_exp
  beacon_hiddens: beacon_hidden_bool_exp
  beacon_hiddens_aggregate: beacon_hidden_aggregate_bool_exp
  beacon_pinneds: beacon_pinned_bool_exp
  beacon_pinneds_aggregate: beacon_pinned_aggregate_bool_exp
  comments: comment_bool_exp
  comments_aggregate: comment_aggregate_bool_exp
  comments_count: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  enabled: Boolean_comparison_exp
  has_picture: Boolean_comparison_exp
  id: String_comparison_exp
  is_hidden: Boolean_comparison_exp
  is_pinned: Boolean_comparison_exp
  lat: float8_comparison_exp
  long: float8_comparison_exp
  my_vote: Int_comparison_exp
  timerange: tstzrange_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_id: String_comparison_exp
  vote_beacons: vote_beacon_bool_exp
  vote_beacons_aggregate: vote_beacon_aggregate_bool_exp
}

"""
unique or primary key constraints on table "beacon"
"""
enum beacon_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  beacon_pkey
}

"""
columns and relationships of "beacon_hidden"
"""
type beacon_hidden {
  """An object relationship"""
  beacon: beacon!
  beacon_id: String!
  hidden_until: timestamptz!

  """An object relationship"""
  user: user!
  user_id: String!
}

"""
aggregated selection of "beacon_hidden"
"""
type beacon_hidden_aggregate {
  aggregate: beacon_hidden_aggregate_fields
  nodes: [beacon_hidden!]!
}

input beacon_hidden_aggregate_bool_exp {
  count: beacon_hidden_aggregate_bool_exp_count
}

input beacon_hidden_aggregate_bool_exp_count {
  arguments: [beacon_hidden_select_column!]
  distinct: Boolean
  filter: beacon_hidden_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "beacon_hidden"
"""
type beacon_hidden_aggregate_fields {
  count(columns: [beacon_hidden_select_column!], distinct: Boolean): Int!
  max: beacon_hidden_max_fields
  min: beacon_hidden_min_fields
}

"""
order by aggregate values of table "beacon_hidden"
"""
input beacon_hidden_aggregate_order_by {
  count: order_by
  max: beacon_hidden_max_order_by
  min: beacon_hidden_min_order_by
}

"""
input type for inserting array relation for remote table "beacon_hidden"
"""
input beacon_hidden_arr_rel_insert_input {
  data: [beacon_hidden_insert_input!]!

  """upsert condition"""
  on_conflict: beacon_hidden_on_conflict
}

"""
Boolean expression to filter rows from the table "beacon_hidden". All fields are combined with a logical 'AND'.
"""
input beacon_hidden_bool_exp {
  _and: [beacon_hidden_bool_exp!]
  _not: beacon_hidden_bool_exp
  _or: [beacon_hidden_bool_exp!]
  beacon: beacon_bool_exp
  beacon_id: String_comparison_exp
  hidden_until: timestamptz_comparison_exp
  user: user_bool_exp
  user_id: String_comparison_exp
}

"""
unique or primary key constraints on table "beacon_hidden"
"""
enum beacon_hidden_constraint {
  """
  unique or primary key constraint on columns "beacon_id", "user_id"
  """
  beacon_hidden_pkey
}

"""
input type for inserting data into table "beacon_hidden"
"""
input beacon_hidden_insert_input {
  beacon: beacon_obj_rel_insert_input
  beacon_id: String
  hidden_until: timestamptz
  user: user_obj_rel_insert_input
  user_id: String
}

"""aggregate max on columns"""
type beacon_hidden_max_fields {
  beacon_id: String
  hidden_until: timestamptz
  user_id: String
}

"""
order by max() on columns of table "beacon_hidden"
"""
input beacon_hidden_max_order_by {
  beacon_id: order_by
  hidden_until: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type beacon_hidden_min_fields {
  beacon_id: String
  hidden_until: timestamptz
  user_id: String
}

"""
order by min() on columns of table "beacon_hidden"
"""
input beacon_hidden_min_order_by {
  beacon_id: order_by
  hidden_until: order_by
  user_id: order_by
}

"""
response of any mutation on the table "beacon_hidden"
"""
type beacon_hidden_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [beacon_hidden!]!
}

"""
on_conflict condition type for table "beacon_hidden"
"""
input beacon_hidden_on_conflict {
  constraint: beacon_hidden_constraint!
  update_columns: [beacon_hidden_update_column!]! = []
  where: beacon_hidden_bool_exp
}

"""Ordering options when selecting data from "beacon_hidden"."""
input beacon_hidden_order_by {
  beacon: beacon_order_by
  beacon_id: order_by
  hidden_until: order_by
  user: user_order_by
  user_id: order_by
}

"""primary key columns input for table: beacon_hidden"""
input beacon_hidden_pk_columns_input {
  beacon_id: String!
  user_id: String!
}

"""
select columns of table "beacon_hidden"
"""
enum beacon_hidden_select_column {
  """column name"""
  beacon_id

  """column name"""
  hidden_until

  """column name"""
  user_id
}

"""
input type for updating data in table "beacon_hidden"
"""
input beacon_hidden_set_input {
  beacon_id: String
  hidden_until: timestamptz
  user_id: String
}

"""
Streaming cursor of the table "beacon_hidden"
"""
input beacon_hidden_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: beacon_hidden_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input beacon_hidden_stream_cursor_value_input {
  beacon_id: String
  hidden_until: timestamptz
  user_id: String
}

"""
update columns of table "beacon_hidden"
"""
enum beacon_hidden_update_column {
  """column name"""
  beacon_id

  """column name"""
  hidden_until

  """column name"""
  user_id
}

input beacon_hidden_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: beacon_hidden_set_input

  """filter the rows which have to be updated"""
  where: beacon_hidden_bool_exp!
}

"""
input type for incrementing numeric columns in table "beacon"
"""
input beacon_inc_input {
  comments_count: Int
  lat: float8
  long: float8
}

"""
input type for inserting data into table "beacon"
"""
input beacon_insert_input {
  author: user_obj_rel_insert_input
  beacon_hiddens: beacon_hidden_arr_rel_insert_input
  beacon_pinneds: beacon_pinned_arr_rel_insert_input
  comments: comment_arr_rel_insert_input
  comments_count: Int
  created_at: timestamptz
  description: String
  enabled: Boolean
  has_picture: Boolean
  id: String
  lat: float8
  long: float8
  timerange: tstzrange
  title: String
  updated_at: timestamptz
  user_id: String
  vote_beacons: vote_beacon_arr_rel_insert_input
}

"""aggregate max on columns"""
type beacon_max_fields {
  comments_count: Int
  created_at: timestamptz
  description: String
  id: String
  lat: float8
  long: float8

  """
  A computed field, executes function "beacon_get_my_vote"
  """
  my_vote: Int
  title: String
  updated_at: timestamptz
  user_id: String
}

"""
order by max() on columns of table "beacon"
"""
input beacon_max_order_by {
  comments_count: order_by
  created_at: order_by
  description: order_by
  id: order_by
  lat: order_by
  long: order_by
  title: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type beacon_min_fields {
  comments_count: Int
  created_at: timestamptz
  description: String
  id: String
  lat: float8
  long: float8

  """
  A computed field, executes function "beacon_get_my_vote"
  """
  my_vote: Int
  title: String
  updated_at: timestamptz
  user_id: String
}

"""
order by min() on columns of table "beacon"
"""
input beacon_min_order_by {
  comments_count: order_by
  created_at: order_by
  description: order_by
  id: order_by
  lat: order_by
  long: order_by
  title: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "beacon"
"""
type beacon_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [beacon!]!
}

"""
input type for inserting object relation for remote table "beacon"
"""
input beacon_obj_rel_insert_input {
  data: beacon_insert_input!

  """upsert condition"""
  on_conflict: beacon_on_conflict
}

"""
on_conflict condition type for table "beacon"
"""
input beacon_on_conflict {
  constraint: beacon_constraint!
  update_columns: [beacon_update_column!]! = []
  where: beacon_bool_exp
}

"""Ordering options when selecting data from "beacon"."""
input beacon_order_by {
  author: user_order_by
  beacon_hiddens_aggregate: beacon_hidden_aggregate_order_by
  beacon_pinneds_aggregate: beacon_pinned_aggregate_order_by
  comments_aggregate: comment_aggregate_order_by
  comments_count: order_by
  created_at: order_by
  description: order_by
  enabled: order_by
  has_picture: order_by
  id: order_by
  is_hidden: order_by
  is_pinned: order_by
  lat: order_by
  long: order_by
  my_vote: order_by
  timerange: order_by
  title: order_by
  updated_at: order_by
  user_id: order_by
  vote_beacons_aggregate: vote_beacon_aggregate_order_by
}

"""
columns and relationships of "beacon_pinned"
"""
type beacon_pinned {
  """An object relationship"""
  beacon: beacon!
  beacon_id: String!

  """An object relationship"""
  user: user!
  user_id: String!
}

"""
aggregated selection of "beacon_pinned"
"""
type beacon_pinned_aggregate {
  aggregate: beacon_pinned_aggregate_fields
  nodes: [beacon_pinned!]!
}

input beacon_pinned_aggregate_bool_exp {
  count: beacon_pinned_aggregate_bool_exp_count
}

input beacon_pinned_aggregate_bool_exp_count {
  arguments: [beacon_pinned_select_column!]
  distinct: Boolean
  filter: beacon_pinned_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "beacon_pinned"
"""
type beacon_pinned_aggregate_fields {
  count(columns: [beacon_pinned_select_column!], distinct: Boolean): Int!
  max: beacon_pinned_max_fields
  min: beacon_pinned_min_fields
}

"""
order by aggregate values of table "beacon_pinned"
"""
input beacon_pinned_aggregate_order_by {
  count: order_by
  max: beacon_pinned_max_order_by
  min: beacon_pinned_min_order_by
}

"""
input type for inserting array relation for remote table "beacon_pinned"
"""
input beacon_pinned_arr_rel_insert_input {
  data: [beacon_pinned_insert_input!]!

  """upsert condition"""
  on_conflict: beacon_pinned_on_conflict
}

"""
Boolean expression to filter rows from the table "beacon_pinned". All fields are combined with a logical 'AND'.
"""
input beacon_pinned_bool_exp {
  _and: [beacon_pinned_bool_exp!]
  _not: beacon_pinned_bool_exp
  _or: [beacon_pinned_bool_exp!]
  beacon: beacon_bool_exp
  beacon_id: String_comparison_exp
  user: user_bool_exp
  user_id: String_comparison_exp
}

"""
unique or primary key constraints on table "beacon_pinned"
"""
enum beacon_pinned_constraint {
  """
  unique or primary key constraint on columns "beacon_id", "user_id"
  """
  beacon_pinned_pkey
}

"""
input type for inserting data into table "beacon_pinned"
"""
input beacon_pinned_insert_input {
  beacon: beacon_obj_rel_insert_input
  beacon_id: String
  user: user_obj_rel_insert_input
  user_id: String
}

"""aggregate max on columns"""
type beacon_pinned_max_fields {
  beacon_id: String
  user_id: String
}

"""
order by max() on columns of table "beacon_pinned"
"""
input beacon_pinned_max_order_by {
  beacon_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type beacon_pinned_min_fields {
  beacon_id: String
  user_id: String
}

"""
order by min() on columns of table "beacon_pinned"
"""
input beacon_pinned_min_order_by {
  beacon_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "beacon_pinned"
"""
type beacon_pinned_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [beacon_pinned!]!
}

"""
on_conflict condition type for table "beacon_pinned"
"""
input beacon_pinned_on_conflict {
  constraint: beacon_pinned_constraint!
  update_columns: [beacon_pinned_update_column!]! = []
  where: beacon_pinned_bool_exp
}

"""Ordering options when selecting data from "beacon_pinned"."""
input beacon_pinned_order_by {
  beacon: beacon_order_by
  beacon_id: order_by
  user: user_order_by
  user_id: order_by
}

"""primary key columns input for table: beacon_pinned"""
input beacon_pinned_pk_columns_input {
  beacon_id: String!
  user_id: String!
}

"""
select columns of table "beacon_pinned"
"""
enum beacon_pinned_select_column {
  """column name"""
  beacon_id

  """column name"""
  user_id
}

"""
input type for updating data in table "beacon_pinned"
"""
input beacon_pinned_set_input {
  beacon_id: String
  user_id: String
}

"""
Streaming cursor of the table "beacon_pinned"
"""
input beacon_pinned_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: beacon_pinned_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input beacon_pinned_stream_cursor_value_input {
  beacon_id: String
  user_id: String
}

"""
update columns of table "beacon_pinned"
"""
enum beacon_pinned_update_column {
  """column name"""
  beacon_id

  """column name"""
  user_id
}

input beacon_pinned_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: beacon_pinned_set_input

  """filter the rows which have to be updated"""
  where: beacon_pinned_bool_exp!
}

"""primary key columns input for table: beacon"""
input beacon_pk_columns_input {
  id: String!
}

"""
select columns of table "beacon"
"""
enum beacon_select_column {
  """column name"""
  comments_count

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  enabled

  """column name"""
  has_picture

  """column name"""
  id

  """column name"""
  lat

  """column name"""
  long

  """column name"""
  timerange

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
select "beacon_aggregate_bool_exp_avg_arguments_columns" columns of table "beacon"
"""
enum beacon_select_column_beacon_aggregate_bool_exp_avg_arguments_columns {
  """column name"""
  lat

  """column name"""
  long
}

"""
select "beacon_aggregate_bool_exp_bool_and_arguments_columns" columns of table "beacon"
"""
enum beacon_select_column_beacon_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  enabled

  """column name"""
  has_picture
}

"""
select "beacon_aggregate_bool_exp_bool_or_arguments_columns" columns of table "beacon"
"""
enum beacon_select_column_beacon_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  enabled

  """column name"""
  has_picture
}

"""
select "beacon_aggregate_bool_exp_corr_arguments_columns" columns of table "beacon"
"""
enum beacon_select_column_beacon_aggregate_bool_exp_corr_arguments_columns {
  """column name"""
  lat

  """column name"""
  long
}

"""
select "beacon_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "beacon"
"""
enum beacon_select_column_beacon_aggregate_bool_exp_covar_samp_arguments_columns {
  """column name"""
  lat

  """column name"""
  long
}

"""
select "beacon_aggregate_bool_exp_max_arguments_columns" columns of table "beacon"
"""
enum beacon_select_column_beacon_aggregate_bool_exp_max_arguments_columns {
  """column name"""
  lat

  """column name"""
  long
}

"""
select "beacon_aggregate_bool_exp_min_arguments_columns" columns of table "beacon"
"""
enum beacon_select_column_beacon_aggregate_bool_exp_min_arguments_columns {
  """column name"""
  lat

  """column name"""
  long
}

"""
select "beacon_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "beacon"
"""
enum beacon_select_column_beacon_aggregate_bool_exp_stddev_samp_arguments_columns {
  """column name"""
  lat

  """column name"""
  long
}

"""
select "beacon_aggregate_bool_exp_sum_arguments_columns" columns of table "beacon"
"""
enum beacon_select_column_beacon_aggregate_bool_exp_sum_arguments_columns {
  """column name"""
  lat

  """column name"""
  long
}

"""
select "beacon_aggregate_bool_exp_var_samp_arguments_columns" columns of table "beacon"
"""
enum beacon_select_column_beacon_aggregate_bool_exp_var_samp_arguments_columns {
  """column name"""
  lat

  """column name"""
  long
}

"""
input type for updating data in table "beacon"
"""
input beacon_set_input {
  comments_count: Int
  created_at: timestamptz
  description: String
  enabled: Boolean
  has_picture: Boolean
  id: String
  lat: float8
  long: float8
  timerange: tstzrange
  title: String
  updated_at: timestamptz
  user_id: String
}

"""aggregate stddev on columns"""
type beacon_stddev_fields {
  comments_count: Float
  lat: Float
  long: Float

  """
  A computed field, executes function "beacon_get_my_vote"
  """
  my_vote: Int
}

"""
order by stddev() on columns of table "beacon"
"""
input beacon_stddev_order_by {
  comments_count: order_by
  lat: order_by
  long: order_by
}

"""aggregate stddev_pop on columns"""
type beacon_stddev_pop_fields {
  comments_count: Float
  lat: Float
  long: Float

  """
  A computed field, executes function "beacon_get_my_vote"
  """
  my_vote: Int
}

"""
order by stddev_pop() on columns of table "beacon"
"""
input beacon_stddev_pop_order_by {
  comments_count: order_by
  lat: order_by
  long: order_by
}

"""aggregate stddev_samp on columns"""
type beacon_stddev_samp_fields {
  comments_count: Float
  lat: Float
  long: Float

  """
  A computed field, executes function "beacon_get_my_vote"
  """
  my_vote: Int
}

"""
order by stddev_samp() on columns of table "beacon"
"""
input beacon_stddev_samp_order_by {
  comments_count: order_by
  lat: order_by
  long: order_by
}

"""
Streaming cursor of the table "beacon"
"""
input beacon_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: beacon_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input beacon_stream_cursor_value_input {
  comments_count: Int
  created_at: timestamptz
  description: String
  enabled: Boolean
  has_picture: Boolean
  id: String
  lat: float8
  long: float8
  timerange: tstzrange
  title: String
  updated_at: timestamptz
  user_id: String
}

"""aggregate sum on columns"""
type beacon_sum_fields {
  comments_count: Int
  lat: float8
  long: float8

  """
  A computed field, executes function "beacon_get_my_vote"
  """
  my_vote: Int
}

"""
order by sum() on columns of table "beacon"
"""
input beacon_sum_order_by {
  comments_count: order_by
  lat: order_by
  long: order_by
}

"""
update columns of table "beacon"
"""
enum beacon_update_column {
  """column name"""
  comments_count

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  enabled

  """column name"""
  has_picture

  """column name"""
  id

  """column name"""
  lat

  """column name"""
  long

  """column name"""
  timerange

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  user_id
}

input beacon_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: beacon_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: beacon_set_input

  """filter the rows which have to be updated"""
  where: beacon_bool_exp!
}

"""aggregate var_pop on columns"""
type beacon_var_pop_fields {
  comments_count: Float
  lat: Float
  long: Float

  """
  A computed field, executes function "beacon_get_my_vote"
  """
  my_vote: Int
}

"""
order by var_pop() on columns of table "beacon"
"""
input beacon_var_pop_order_by {
  comments_count: order_by
  lat: order_by
  long: order_by
}

"""aggregate var_samp on columns"""
type beacon_var_samp_fields {
  comments_count: Float
  lat: Float
  long: Float

  """
  A computed field, executes function "beacon_get_my_vote"
  """
  my_vote: Int
}

"""
order by var_samp() on columns of table "beacon"
"""
input beacon_var_samp_order_by {
  comments_count: order_by
  lat: order_by
  long: order_by
}

"""aggregate variance on columns"""
type beacon_variance_fields {
  comments_count: Float
  lat: Float
  long: Float

  """
  A computed field, executes function "beacon_get_my_vote"
  """
  my_vote: Int
}

"""
order by variance() on columns of table "beacon"
"""
input beacon_variance_order_by {
  comments_count: order_by
  lat: order_by
  long: order_by
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "comment"
"""
type comment {
  """An object relationship"""
  author: user!

  """An object relationship"""
  beacon: beacon!
  beacon_id: String!
  content: String!
  created_at: timestamptz!
  id: String!

  """
  A computed field, executes function "comment_get_my_vote"
  """
  my_vote: Int
  user_id: String!

  """An array relationship"""
  vote_comments(
    """distinct select on columns"""
    distinct_on: [vote_comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_comment_order_by!]

    """filter the rows returned"""
    where: vote_comment_bool_exp
  ): [vote_comment!]!

  """An aggregate relationship"""
  vote_comments_aggregate(
    """distinct select on columns"""
    distinct_on: [vote_comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_comment_order_by!]

    """filter the rows returned"""
    where: vote_comment_bool_exp
  ): vote_comment_aggregate!
}

"""
aggregated selection of "comment"
"""
type comment_aggregate {
  aggregate: comment_aggregate_fields
  nodes: [comment!]!
}

input comment_aggregate_bool_exp {
  count: comment_aggregate_bool_exp_count
}

input comment_aggregate_bool_exp_count {
  arguments: [comment_select_column!]
  distinct: Boolean
  filter: comment_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "comment"
"""
type comment_aggregate_fields {
  avg: comment_avg_fields
  count(columns: [comment_select_column!], distinct: Boolean): Int!
  max: comment_max_fields
  min: comment_min_fields
  stddev: comment_stddev_fields
  stddev_pop: comment_stddev_pop_fields
  stddev_samp: comment_stddev_samp_fields
  sum: comment_sum_fields
  var_pop: comment_var_pop_fields
  var_samp: comment_var_samp_fields
  variance: comment_variance_fields
}

"""
order by aggregate values of table "comment"
"""
input comment_aggregate_order_by {
  count: order_by
  max: comment_max_order_by
  min: comment_min_order_by
}

"""
input type for inserting array relation for remote table "comment"
"""
input comment_arr_rel_insert_input {
  data: [comment_insert_input!]!

  """upsert condition"""
  on_conflict: comment_on_conflict
}

"""aggregate avg on columns"""
type comment_avg_fields {
  """
  A computed field, executes function "comment_get_my_vote"
  """
  my_vote: Int
}

"""
Boolean expression to filter rows from the table "comment". All fields are combined with a logical 'AND'.
"""
input comment_bool_exp {
  _and: [comment_bool_exp!]
  _not: comment_bool_exp
  _or: [comment_bool_exp!]
  author: user_bool_exp
  beacon: beacon_bool_exp
  beacon_id: String_comparison_exp
  content: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: String_comparison_exp
  my_vote: Int_comparison_exp
  user_id: String_comparison_exp
  vote_comments: vote_comment_bool_exp
  vote_comments_aggregate: vote_comment_aggregate_bool_exp
}

"""
unique or primary key constraints on table "comment"
"""
enum comment_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  comment_pkey
}

"""
input type for inserting data into table "comment"
"""
input comment_insert_input {
  author: user_obj_rel_insert_input
  beacon: beacon_obj_rel_insert_input
  beacon_id: String
  content: String
  created_at: timestamptz
  id: String
  user_id: String
  vote_comments: vote_comment_arr_rel_insert_input
}

"""aggregate max on columns"""
type comment_max_fields {
  beacon_id: String
  content: String
  created_at: timestamptz
  id: String

  """
  A computed field, executes function "comment_get_my_vote"
  """
  my_vote: Int
  user_id: String
}

"""
order by max() on columns of table "comment"
"""
input comment_max_order_by {
  beacon_id: order_by
  content: order_by
  created_at: order_by
  id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type comment_min_fields {
  beacon_id: String
  content: String
  created_at: timestamptz
  id: String

  """
  A computed field, executes function "comment_get_my_vote"
  """
  my_vote: Int
  user_id: String
}

"""
order by min() on columns of table "comment"
"""
input comment_min_order_by {
  beacon_id: order_by
  content: order_by
  created_at: order_by
  id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "comment"
"""
type comment_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [comment!]!
}

"""
input type for inserting object relation for remote table "comment"
"""
input comment_obj_rel_insert_input {
  data: comment_insert_input!

  """upsert condition"""
  on_conflict: comment_on_conflict
}

"""
on_conflict condition type for table "comment"
"""
input comment_on_conflict {
  constraint: comment_constraint!
  update_columns: [comment_update_column!]! = []
  where: comment_bool_exp
}

"""Ordering options when selecting data from "comment"."""
input comment_order_by {
  author: user_order_by
  beacon: beacon_order_by
  beacon_id: order_by
  content: order_by
  created_at: order_by
  id: order_by
  my_vote: order_by
  user_id: order_by
  vote_comments_aggregate: vote_comment_aggregate_order_by
}

"""primary key columns input for table: comment"""
input comment_pk_columns_input {
  id: String!
}

"""
select columns of table "comment"
"""
enum comment_select_column {
  """column name"""
  beacon_id

  """column name"""
  content

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  user_id
}

"""
input type for updating data in table "comment"
"""
input comment_set_input {
  beacon_id: String
  content: String
  created_at: timestamptz
  id: String
  user_id: String
}

"""aggregate stddev on columns"""
type comment_stddev_fields {
  """
  A computed field, executes function "comment_get_my_vote"
  """
  my_vote: Int
}

"""aggregate stddev_pop on columns"""
type comment_stddev_pop_fields {
  """
  A computed field, executes function "comment_get_my_vote"
  """
  my_vote: Int
}

"""aggregate stddev_samp on columns"""
type comment_stddev_samp_fields {
  """
  A computed field, executes function "comment_get_my_vote"
  """
  my_vote: Int
}

"""
Streaming cursor of the table "comment"
"""
input comment_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: comment_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input comment_stream_cursor_value_input {
  beacon_id: String
  content: String
  created_at: timestamptz
  id: String
  user_id: String
}

"""aggregate sum on columns"""
type comment_sum_fields {
  """
  A computed field, executes function "comment_get_my_vote"
  """
  my_vote: Int
}

"""
update columns of table "comment"
"""
enum comment_update_column {
  """column name"""
  beacon_id

  """column name"""
  content

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  user_id
}

input comment_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: comment_set_input

  """filter the rows which have to be updated"""
  where: comment_bool_exp!
}

"""aggregate var_pop on columns"""
type comment_var_pop_fields {
  """
  A computed field, executes function "comment_get_my_vote"
  """
  my_vote: Int
}

"""aggregate var_samp on columns"""
type comment_var_samp_fields {
  """
  A computed field, executes function "comment_get_my_vote"
  """
  my_vote: Int
}

"""aggregate variance on columns"""
type comment_variance_fields {
  """
  A computed field, executes function "comment_get_my_vote"
  """
  my_vote: Int
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

type Edge {
  dest: String!
  src: String!
  weight: Float!
}

type Features {
  bbox: [Float]
  geometry: Geometry
  properties: Properties
  type: String
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

type Geometry {
  coordinates: [Float]
  type: String
}

type GravityGraph {
  beacons: [NodeScore]!
  comments: [NodeScore]!
  edges: [Edge]!
  users: [NodeScore]!
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "beacon"
  """
  delete_beacon(
    """filter the rows which have to be deleted"""
    where: beacon_bool_exp!
  ): beacon_mutation_response

  """
  delete single row from the table: "beacon"
  """
  delete_beacon_by_pk(id: String!): beacon

  """
  delete data from the table: "beacon_hidden"
  """
  delete_beacon_hidden(
    """filter the rows which have to be deleted"""
    where: beacon_hidden_bool_exp!
  ): beacon_hidden_mutation_response

  """
  delete single row from the table: "beacon_hidden"
  """
  delete_beacon_hidden_by_pk(beacon_id: String!, user_id: String!): beacon_hidden

  """
  delete data from the table: "beacon_pinned"
  """
  delete_beacon_pinned(
    """filter the rows which have to be deleted"""
    where: beacon_pinned_bool_exp!
  ): beacon_pinned_mutation_response

  """
  delete single row from the table: "beacon_pinned"
  """
  delete_beacon_pinned_by_pk(beacon_id: String!, user_id: String!): beacon_pinned

  """
  delete data from the table: "comment"
  """
  delete_comment(
    """filter the rows which have to be deleted"""
    where: comment_bool_exp!
  ): comment_mutation_response

  """
  delete single row from the table: "comment"
  """
  delete_comment_by_pk(id: String!): comment

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(id: String!): user

  """
  delete data from the table: "vote_beacon"
  """
  delete_vote_beacon(
    """filter the rows which have to be deleted"""
    where: vote_beacon_bool_exp!
  ): vote_beacon_mutation_response

  """
  delete single row from the table: "vote_beacon"
  """
  delete_vote_beacon_by_pk(object: String!, subject: String!): vote_beacon

  """
  delete data from the table: "vote_comment"
  """
  delete_vote_comment(
    """filter the rows which have to be deleted"""
    where: vote_comment_bool_exp!
  ): vote_comment_mutation_response

  """
  delete single row from the table: "vote_comment"
  """
  delete_vote_comment_by_pk(object: String!, subject: String!): vote_comment

  """
  delete data from the table: "vote_user"
  """
  delete_vote_user(
    """filter the rows which have to be deleted"""
    where: vote_user_bool_exp!
  ): vote_user_mutation_response

  """
  delete single row from the table: "vote_user"
  """
  delete_vote_user_by_pk(object: String!, subject: String!): vote_user

  """
  insert data into the table: "beacon"
  """
  insert_beacon(
    """the rows to be inserted"""
    objects: [beacon_insert_input!]!

    """upsert condition"""
    on_conflict: beacon_on_conflict
  ): beacon_mutation_response

  """
  insert data into the table: "beacon_hidden"
  """
  insert_beacon_hidden(
    """the rows to be inserted"""
    objects: [beacon_hidden_insert_input!]!

    """upsert condition"""
    on_conflict: beacon_hidden_on_conflict
  ): beacon_hidden_mutation_response

  """
  insert a single row into the table: "beacon_hidden"
  """
  insert_beacon_hidden_one(
    """the row to be inserted"""
    object: beacon_hidden_insert_input!

    """upsert condition"""
    on_conflict: beacon_hidden_on_conflict
  ): beacon_hidden

  """
  insert a single row into the table: "beacon"
  """
  insert_beacon_one(
    """the row to be inserted"""
    object: beacon_insert_input!

    """upsert condition"""
    on_conflict: beacon_on_conflict
  ): beacon

  """
  insert data into the table: "beacon_pinned"
  """
  insert_beacon_pinned(
    """the rows to be inserted"""
    objects: [beacon_pinned_insert_input!]!

    """upsert condition"""
    on_conflict: beacon_pinned_on_conflict
  ): beacon_pinned_mutation_response

  """
  insert a single row into the table: "beacon_pinned"
  """
  insert_beacon_pinned_one(
    """the row to be inserted"""
    object: beacon_pinned_insert_input!

    """upsert condition"""
    on_conflict: beacon_pinned_on_conflict
  ): beacon_pinned

  """
  insert data into the table: "comment"
  """
  insert_comment(
    """the rows to be inserted"""
    objects: [comment_insert_input!]!

    """upsert condition"""
    on_conflict: comment_on_conflict
  ): comment_mutation_response

  """
  insert a single row into the table: "comment"
  """
  insert_comment_one(
    """the row to be inserted"""
    object: comment_insert_input!

    """upsert condition"""
    on_conflict: comment_on_conflict
  ): comment

  """
  insert data into the table: "user"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user

  """
  insert data into the table: "vote_beacon"
  """
  insert_vote_beacon(
    """the rows to be inserted"""
    objects: [vote_beacon_insert_input!]!

    """upsert condition"""
    on_conflict: vote_beacon_on_conflict
  ): vote_beacon_mutation_response

  """
  insert a single row into the table: "vote_beacon"
  """
  insert_vote_beacon_one(
    """the row to be inserted"""
    object: vote_beacon_insert_input!

    """upsert condition"""
    on_conflict: vote_beacon_on_conflict
  ): vote_beacon

  """
  insert data into the table: "vote_comment"
  """
  insert_vote_comment(
    """the rows to be inserted"""
    objects: [vote_comment_insert_input!]!

    """upsert condition"""
    on_conflict: vote_comment_on_conflict
  ): vote_comment_mutation_response

  """
  insert a single row into the table: "vote_comment"
  """
  insert_vote_comment_one(
    """the row to be inserted"""
    object: vote_comment_insert_input!

    """upsert condition"""
    on_conflict: vote_comment_on_conflict
  ): vote_comment

  """
  insert data into the table: "vote_user"
  """
  insert_vote_user(
    """the rows to be inserted"""
    objects: [vote_user_insert_input!]!

    """upsert condition"""
    on_conflict: vote_user_on_conflict
  ): vote_user_mutation_response

  """
  insert a single row into the table: "vote_user"
  """
  insert_vote_user_one(
    """the row to be inserted"""
    object: vote_user_insert_input!

    """upsert condition"""
    on_conflict: vote_user_on_conflict
  ): vote_user
  putEdge(dest: String!, src: String!, weight: Float!): Edge!

  """
  update data of the table: "beacon"
  """
  update_beacon(
    """increments the numeric columns with given value of the filtered values"""
    _inc: beacon_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: beacon_set_input

    """filter the rows which have to be updated"""
    where: beacon_bool_exp!
  ): beacon_mutation_response

  """
  update single row of the table: "beacon"
  """
  update_beacon_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: beacon_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: beacon_set_input
    pk_columns: beacon_pk_columns_input!
  ): beacon

  """
  update data of the table: "beacon_hidden"
  """
  update_beacon_hidden(
    """sets the columns of the filtered rows to the given values"""
    _set: beacon_hidden_set_input

    """filter the rows which have to be updated"""
    where: beacon_hidden_bool_exp!
  ): beacon_hidden_mutation_response

  """
  update single row of the table: "beacon_hidden"
  """
  update_beacon_hidden_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: beacon_hidden_set_input
    pk_columns: beacon_hidden_pk_columns_input!
  ): beacon_hidden

  """
  update multiples rows of table: "beacon_hidden"
  """
  update_beacon_hidden_many(
    """updates to execute, in order"""
    updates: [beacon_hidden_updates!]!
  ): [beacon_hidden_mutation_response]

  """
  update multiples rows of table: "beacon"
  """
  update_beacon_many(
    """updates to execute, in order"""
    updates: [beacon_updates!]!
  ): [beacon_mutation_response]

  """
  update data of the table: "beacon_pinned"
  """
  update_beacon_pinned(
    """sets the columns of the filtered rows to the given values"""
    _set: beacon_pinned_set_input

    """filter the rows which have to be updated"""
    where: beacon_pinned_bool_exp!
  ): beacon_pinned_mutation_response

  """
  update single row of the table: "beacon_pinned"
  """
  update_beacon_pinned_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: beacon_pinned_set_input
    pk_columns: beacon_pinned_pk_columns_input!
  ): beacon_pinned

  """
  update multiples rows of table: "beacon_pinned"
  """
  update_beacon_pinned_many(
    """updates to execute, in order"""
    updates: [beacon_pinned_updates!]!
  ): [beacon_pinned_mutation_response]

  """
  update data of the table: "comment"
  """
  update_comment(
    """sets the columns of the filtered rows to the given values"""
    _set: comment_set_input

    """filter the rows which have to be updated"""
    where: comment_bool_exp!
  ): comment_mutation_response

  """
  update single row of the table: "comment"
  """
  update_comment_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: comment_set_input
    pk_columns: comment_pk_columns_input!
  ): comment

  """
  update multiples rows of table: "comment"
  """
  update_comment_many(
    """updates to execute, in order"""
    updates: [comment_updates!]!
  ): [comment_mutation_response]

  """
  update data of the table: "user"
  """
  update_user(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user

  """
  update multiples rows of table: "user"
  """
  update_user_many(
    """updates to execute, in order"""
    updates: [user_updates!]!
  ): [user_mutation_response]

  """
  update data of the table: "vote_beacon"
  """
  update_vote_beacon(
    """increments the numeric columns with given value of the filtered values"""
    _inc: vote_beacon_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vote_beacon_set_input

    """filter the rows which have to be updated"""
    where: vote_beacon_bool_exp!
  ): vote_beacon_mutation_response

  """
  update single row of the table: "vote_beacon"
  """
  update_vote_beacon_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: vote_beacon_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vote_beacon_set_input
    pk_columns: vote_beacon_pk_columns_input!
  ): vote_beacon

  """
  update multiples rows of table: "vote_beacon"
  """
  update_vote_beacon_many(
    """updates to execute, in order"""
    updates: [vote_beacon_updates!]!
  ): [vote_beacon_mutation_response]

  """
  update data of the table: "vote_comment"
  """
  update_vote_comment(
    """increments the numeric columns with given value of the filtered values"""
    _inc: vote_comment_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vote_comment_set_input

    """filter the rows which have to be updated"""
    where: vote_comment_bool_exp!
  ): vote_comment_mutation_response

  """
  update single row of the table: "vote_comment"
  """
  update_vote_comment_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: vote_comment_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vote_comment_set_input
    pk_columns: vote_comment_pk_columns_input!
  ): vote_comment

  """
  update multiples rows of table: "vote_comment"
  """
  update_vote_comment_many(
    """updates to execute, in order"""
    updates: [vote_comment_updates!]!
  ): [vote_comment_mutation_response]

  """
  update data of the table: "vote_user"
  """
  update_vote_user(
    """increments the numeric columns with given value of the filtered values"""
    _inc: vote_user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vote_user_set_input

    """filter the rows which have to be updated"""
    where: vote_user_bool_exp!
  ): vote_user_mutation_response

  """
  update single row of the table: "vote_user"
  """
  update_vote_user_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: vote_user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vote_user_set_input
    pk_columns: vote_user_pk_columns_input!
  ): vote_user

  """
  update multiples rows of table: "vote_user"
  """
  update_vote_user_many(
    """updates to execute, in order"""
    updates: [vote_user_updates!]!
  ): [vote_user_mutation_response]
}

type MutualScore {
  ego: String!
  egoScore: Float!
  node: String!
  nodeScore: Float!
  user: user
}

input NodeInput {
  like: String
}

type NodeScore {
  beacon: beacon
  comment: comment
  ego: String!
  node: String!
  score: Float!
  user: user
}

input NodeScoreWhereInput {
  node: NodeInput
  score: ScoreInput
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type Properties {
  address: Address
  addresstype: String
  category: String
  display_name: String
  importance: Float
  name: String
  osm_id: Int
  osm_type: String
  place_id: Int
  place_rank: Int
  type: String
}

type query_root {
  """
  fetch data from the table: "beacon"
  """
  beacon(
    """distinct select on columns"""
    distinct_on: [beacon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_order_by!]

    """filter the rows returned"""
    where: beacon_bool_exp
  ): [beacon!]!

  """
  fetch aggregated fields from the table: "beacon"
  """
  beacon_aggregate(
    """distinct select on columns"""
    distinct_on: [beacon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_order_by!]

    """filter the rows returned"""
    where: beacon_bool_exp
  ): beacon_aggregate!

  """fetch data from the table: "beacon" using primary key columns"""
  beacon_by_pk(id: String!): beacon

  """
  fetch data from the table: "beacon_hidden"
  """
  beacon_hidden(
    """distinct select on columns"""
    distinct_on: [beacon_hidden_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_hidden_order_by!]

    """filter the rows returned"""
    where: beacon_hidden_bool_exp
  ): [beacon_hidden!]!

  """
  fetch aggregated fields from the table: "beacon_hidden"
  """
  beacon_hidden_aggregate(
    """distinct select on columns"""
    distinct_on: [beacon_hidden_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_hidden_order_by!]

    """filter the rows returned"""
    where: beacon_hidden_bool_exp
  ): beacon_hidden_aggregate!

  """fetch data from the table: "beacon_hidden" using primary key columns"""
  beacon_hidden_by_pk(beacon_id: String!, user_id: String!): beacon_hidden

  """
  fetch data from the table: "beacon_pinned"
  """
  beacon_pinned(
    """distinct select on columns"""
    distinct_on: [beacon_pinned_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_pinned_order_by!]

    """filter the rows returned"""
    where: beacon_pinned_bool_exp
  ): [beacon_pinned!]!

  """
  fetch aggregated fields from the table: "beacon_pinned"
  """
  beacon_pinned_aggregate(
    """distinct select on columns"""
    distinct_on: [beacon_pinned_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_pinned_order_by!]

    """filter the rows returned"""
    where: beacon_pinned_bool_exp
  ): beacon_pinned_aggregate!

  """fetch data from the table: "beacon_pinned" using primary key columns"""
  beacon_pinned_by_pk(beacon_id: String!, user_id: String!): beacon_pinned

  """
  fetch data from the table: "comment"
  """
  comment(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): [comment!]!

  """
  fetch aggregated fields from the table: "comment"
  """
  comment_aggregate(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): comment_aggregate!

  """fetch data from the table: "comment" using primary key columns"""
  comment_by_pk(id: String!): comment
  edge(dest: String!, src: String!): Edge
  edges(src: String!): [Edge!]!
  getPlaceName(lat: Float!, long: Float!): ReverseGeocodingOutput
  gravityGraph(ego: String!, focus: String, limit: Int, positiveOnly: Boolean): GravityGraph!
  score(ego: String!, node: String!): NodeScore
  scores(ego: String!, hidePersonal: Boolean, limit: Int, where: NodeScoreWhereInput): [NodeScore!]!

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: String!): user
  usersStats(ego: String!): [MutualScore!]!

  """
  fetch data from the table: "vote_beacon"
  """
  vote_beacon(
    """distinct select on columns"""
    distinct_on: [vote_beacon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_beacon_order_by!]

    """filter the rows returned"""
    where: vote_beacon_bool_exp
  ): [vote_beacon!]!

  """
  fetch aggregated fields from the table: "vote_beacon"
  """
  vote_beacon_aggregate(
    """distinct select on columns"""
    distinct_on: [vote_beacon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_beacon_order_by!]

    """filter the rows returned"""
    where: vote_beacon_bool_exp
  ): vote_beacon_aggregate!

  """fetch data from the table: "vote_beacon" using primary key columns"""
  vote_beacon_by_pk(object: String!, subject: String!): vote_beacon

  """
  fetch data from the table: "vote_comment"
  """
  vote_comment(
    """distinct select on columns"""
    distinct_on: [vote_comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_comment_order_by!]

    """filter the rows returned"""
    where: vote_comment_bool_exp
  ): [vote_comment!]!

  """
  fetch aggregated fields from the table: "vote_comment"
  """
  vote_comment_aggregate(
    """distinct select on columns"""
    distinct_on: [vote_comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_comment_order_by!]

    """filter the rows returned"""
    where: vote_comment_bool_exp
  ): vote_comment_aggregate!

  """fetch data from the table: "vote_comment" using primary key columns"""
  vote_comment_by_pk(object: String!, subject: String!): vote_comment

  """
  fetch data from the table: "vote_user"
  """
  vote_user(
    """distinct select on columns"""
    distinct_on: [vote_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_user_order_by!]

    """filter the rows returned"""
    where: vote_user_bool_exp
  ): [vote_user!]!

  """
  fetch aggregated fields from the table: "vote_user"
  """
  vote_user_aggregate(
    """distinct select on columns"""
    distinct_on: [vote_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_user_order_by!]

    """filter the rows returned"""
    where: vote_user_bool_exp
  ): vote_user_aggregate!

  """fetch data from the table: "vote_user" using primary key columns"""
  vote_user_by_pk(object: String!, subject: String!): vote_user
}

type ReverseGeocodingOutput {
  features: [Features]
  licence: String
  type: String
}

input ScoreInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "beacon"
  """
  beacon(
    """distinct select on columns"""
    distinct_on: [beacon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_order_by!]

    """filter the rows returned"""
    where: beacon_bool_exp
  ): [beacon!]!

  """
  fetch aggregated fields from the table: "beacon"
  """
  beacon_aggregate(
    """distinct select on columns"""
    distinct_on: [beacon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_order_by!]

    """filter the rows returned"""
    where: beacon_bool_exp
  ): beacon_aggregate!

  """fetch data from the table: "beacon" using primary key columns"""
  beacon_by_pk(id: String!): beacon

  """
  fetch data from the table: "beacon_hidden"
  """
  beacon_hidden(
    """distinct select on columns"""
    distinct_on: [beacon_hidden_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_hidden_order_by!]

    """filter the rows returned"""
    where: beacon_hidden_bool_exp
  ): [beacon_hidden!]!

  """
  fetch aggregated fields from the table: "beacon_hidden"
  """
  beacon_hidden_aggregate(
    """distinct select on columns"""
    distinct_on: [beacon_hidden_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_hidden_order_by!]

    """filter the rows returned"""
    where: beacon_hidden_bool_exp
  ): beacon_hidden_aggregate!

  """fetch data from the table: "beacon_hidden" using primary key columns"""
  beacon_hidden_by_pk(beacon_id: String!, user_id: String!): beacon_hidden

  """
  fetch data from the table in a streaming manner: "beacon_hidden"
  """
  beacon_hidden_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [beacon_hidden_stream_cursor_input]!

    """filter the rows returned"""
    where: beacon_hidden_bool_exp
  ): [beacon_hidden!]!

  """
  fetch data from the table: "beacon_pinned"
  """
  beacon_pinned(
    """distinct select on columns"""
    distinct_on: [beacon_pinned_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_pinned_order_by!]

    """filter the rows returned"""
    where: beacon_pinned_bool_exp
  ): [beacon_pinned!]!

  """
  fetch aggregated fields from the table: "beacon_pinned"
  """
  beacon_pinned_aggregate(
    """distinct select on columns"""
    distinct_on: [beacon_pinned_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_pinned_order_by!]

    """filter the rows returned"""
    where: beacon_pinned_bool_exp
  ): beacon_pinned_aggregate!

  """fetch data from the table: "beacon_pinned" using primary key columns"""
  beacon_pinned_by_pk(beacon_id: String!, user_id: String!): beacon_pinned

  """
  fetch data from the table in a streaming manner: "beacon_pinned"
  """
  beacon_pinned_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [beacon_pinned_stream_cursor_input]!

    """filter the rows returned"""
    where: beacon_pinned_bool_exp
  ): [beacon_pinned!]!

  """
  fetch data from the table in a streaming manner: "beacon"
  """
  beacon_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [beacon_stream_cursor_input]!

    """filter the rows returned"""
    where: beacon_bool_exp
  ): [beacon!]!

  """
  fetch data from the table: "comment"
  """
  comment(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): [comment!]!

  """
  fetch aggregated fields from the table: "comment"
  """
  comment_aggregate(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): comment_aggregate!

  """fetch data from the table: "comment" using primary key columns"""
  comment_by_pk(id: String!): comment

  """
  fetch data from the table in a streaming manner: "comment"
  """
  comment_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [comment_stream_cursor_input]!

    """filter the rows returned"""
    where: comment_bool_exp
  ): [comment!]!

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: String!): user

  """
  fetch data from the table in a streaming manner: "user"
  """
  user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_stream_cursor_input]!

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch data from the table: "vote_beacon"
  """
  vote_beacon(
    """distinct select on columns"""
    distinct_on: [vote_beacon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_beacon_order_by!]

    """filter the rows returned"""
    where: vote_beacon_bool_exp
  ): [vote_beacon!]!

  """
  fetch aggregated fields from the table: "vote_beacon"
  """
  vote_beacon_aggregate(
    """distinct select on columns"""
    distinct_on: [vote_beacon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_beacon_order_by!]

    """filter the rows returned"""
    where: vote_beacon_bool_exp
  ): vote_beacon_aggregate!

  """fetch data from the table: "vote_beacon" using primary key columns"""
  vote_beacon_by_pk(object: String!, subject: String!): vote_beacon

  """
  fetch data from the table in a streaming manner: "vote_beacon"
  """
  vote_beacon_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [vote_beacon_stream_cursor_input]!

    """filter the rows returned"""
    where: vote_beacon_bool_exp
  ): [vote_beacon!]!

  """
  fetch data from the table: "vote_comment"
  """
  vote_comment(
    """distinct select on columns"""
    distinct_on: [vote_comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_comment_order_by!]

    """filter the rows returned"""
    where: vote_comment_bool_exp
  ): [vote_comment!]!

  """
  fetch aggregated fields from the table: "vote_comment"
  """
  vote_comment_aggregate(
    """distinct select on columns"""
    distinct_on: [vote_comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_comment_order_by!]

    """filter the rows returned"""
    where: vote_comment_bool_exp
  ): vote_comment_aggregate!

  """fetch data from the table: "vote_comment" using primary key columns"""
  vote_comment_by_pk(object: String!, subject: String!): vote_comment

  """
  fetch data from the table in a streaming manner: "vote_comment"
  """
  vote_comment_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [vote_comment_stream_cursor_input]!

    """filter the rows returned"""
    where: vote_comment_bool_exp
  ): [vote_comment!]!

  """
  fetch data from the table: "vote_user"
  """
  vote_user(
    """distinct select on columns"""
    distinct_on: [vote_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_user_order_by!]

    """filter the rows returned"""
    where: vote_user_bool_exp
  ): [vote_user!]!

  """
  fetch aggregated fields from the table: "vote_user"
  """
  vote_user_aggregate(
    """distinct select on columns"""
    distinct_on: [vote_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_user_order_by!]

    """filter the rows returned"""
    where: vote_user_bool_exp
  ): vote_user_aggregate!

  """fetch data from the table: "vote_user" using primary key columns"""
  vote_user_by_pk(object: String!, subject: String!): vote_user

  """
  fetch data from the table in a streaming manner: "vote_user"
  """
  vote_user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [vote_user_stream_cursor_input]!

    """filter the rows returned"""
    where: vote_user_bool_exp
  ): [vote_user!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar tstzrange

"""
Boolean expression to compare columns of type "tstzrange". All fields are combined with logical 'AND'.
"""
input tstzrange_comparison_exp {
  _eq: tstzrange
  _gt: tstzrange
  _gte: tstzrange
  _in: [tstzrange!]
  _is_null: Boolean
  _lt: tstzrange
  _lte: tstzrange
  _neq: tstzrange
  _nin: [tstzrange!]
}

"""
columns and relationships of "user"
"""
type user {
  """An array relationship"""
  beacon_hiddens(
    """distinct select on columns"""
    distinct_on: [beacon_hidden_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_hidden_order_by!]

    """filter the rows returned"""
    where: beacon_hidden_bool_exp
  ): [beacon_hidden!]!

  """An aggregate relationship"""
  beacon_hiddens_aggregate(
    """distinct select on columns"""
    distinct_on: [beacon_hidden_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_hidden_order_by!]

    """filter the rows returned"""
    where: beacon_hidden_bool_exp
  ): beacon_hidden_aggregate!

  """An array relationship"""
  beacon_pinneds(
    """distinct select on columns"""
    distinct_on: [beacon_pinned_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_pinned_order_by!]

    """filter the rows returned"""
    where: beacon_pinned_bool_exp
  ): [beacon_pinned!]!

  """An aggregate relationship"""
  beacon_pinneds_aggregate(
    """distinct select on columns"""
    distinct_on: [beacon_pinned_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_pinned_order_by!]

    """filter the rows returned"""
    where: beacon_pinned_bool_exp
  ): beacon_pinned_aggregate!

  """An array relationship"""
  beacons(
    """distinct select on columns"""
    distinct_on: [beacon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_order_by!]

    """filter the rows returned"""
    where: beacon_bool_exp
  ): [beacon!]!

  """An aggregate relationship"""
  beacons_aggregate(
    """distinct select on columns"""
    distinct_on: [beacon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [beacon_order_by!]

    """filter the rows returned"""
    where: beacon_bool_exp
  ): beacon_aggregate!

  """An array relationship"""
  comments(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): [comment!]!

  """An aggregate relationship"""
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): comment_aggregate!
  created_at: timestamptz!
  description: String!
  has_picture: Boolean!
  id: String!

  """
  A computed field, executes function "user_get_my_vote"
  """
  my_vote: Int
  public_key: String!
  title: String!
  updated_at: timestamptz!

  """An array relationship"""
  voteUsersBySubject(
    """distinct select on columns"""
    distinct_on: [vote_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_user_order_by!]

    """filter the rows returned"""
    where: vote_user_bool_exp
  ): [vote_user!]!

  """An aggregate relationship"""
  voteUsersBySubject_aggregate(
    """distinct select on columns"""
    distinct_on: [vote_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_user_order_by!]

    """filter the rows returned"""
    where: vote_user_bool_exp
  ): vote_user_aggregate!

  """An array relationship"""
  vote_beacons(
    """distinct select on columns"""
    distinct_on: [vote_beacon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_beacon_order_by!]

    """filter the rows returned"""
    where: vote_beacon_bool_exp
  ): [vote_beacon!]!

  """An aggregate relationship"""
  vote_beacons_aggregate(
    """distinct select on columns"""
    distinct_on: [vote_beacon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_beacon_order_by!]

    """filter the rows returned"""
    where: vote_beacon_bool_exp
  ): vote_beacon_aggregate!

  """An array relationship"""
  vote_comments(
    """distinct select on columns"""
    distinct_on: [vote_comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_comment_order_by!]

    """filter the rows returned"""
    where: vote_comment_bool_exp
  ): [vote_comment!]!

  """An aggregate relationship"""
  vote_comments_aggregate(
    """distinct select on columns"""
    distinct_on: [vote_comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_comment_order_by!]

    """filter the rows returned"""
    where: vote_comment_bool_exp
  ): vote_comment_aggregate!

  """An array relationship"""
  vote_users(
    """distinct select on columns"""
    distinct_on: [vote_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_user_order_by!]

    """filter the rows returned"""
    where: vote_user_bool_exp
  ): [vote_user!]!

  """An aggregate relationship"""
  vote_users_aggregate(
    """distinct select on columns"""
    distinct_on: [vote_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vote_user_order_by!]

    """filter the rows returned"""
    where: vote_user_bool_exp
  ): vote_user_aggregate!
}

"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  avg: user_avg_fields
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
  stddev: user_stddev_fields
  stddev_pop: user_stddev_pop_fields
  stddev_samp: user_stddev_samp_fields
  sum: user_sum_fields
  var_pop: user_var_pop_fields
  var_samp: user_var_samp_fields
  variance: user_variance_fields
}

"""aggregate avg on columns"""
type user_avg_fields {
  """
  A computed field, executes function "user_get_my_vote"
  """
  my_vote: Int
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  beacon_hiddens: beacon_hidden_bool_exp
  beacon_hiddens_aggregate: beacon_hidden_aggregate_bool_exp
  beacon_pinneds: beacon_pinned_bool_exp
  beacon_pinneds_aggregate: beacon_pinned_aggregate_bool_exp
  beacons: beacon_bool_exp
  beacons_aggregate: beacon_aggregate_bool_exp
  comments: comment_bool_exp
  comments_aggregate: comment_aggregate_bool_exp
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  has_picture: Boolean_comparison_exp
  id: String_comparison_exp
  my_vote: Int_comparison_exp
  public_key: String_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  voteUsersBySubject: vote_user_bool_exp
  voteUsersBySubject_aggregate: vote_user_aggregate_bool_exp
  vote_beacons: vote_beacon_bool_exp
  vote_beacons_aggregate: vote_beacon_aggregate_bool_exp
  vote_comments: vote_comment_bool_exp
  vote_comments_aggregate: vote_comment_aggregate_bool_exp
  vote_users: vote_user_bool_exp
  vote_users_aggregate: vote_user_aggregate_bool_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_pkey

  """
  unique or primary key constraint on columns "public_key"
  """
  user_public_key_key
}

"""
input type for inserting data into table "user"
"""
input user_insert_input {
  beacon_hiddens: beacon_hidden_arr_rel_insert_input
  beacon_pinneds: beacon_pinned_arr_rel_insert_input
  beacons: beacon_arr_rel_insert_input
  comments: comment_arr_rel_insert_input
  created_at: timestamptz
  description: String
  has_picture: Boolean
  id: String
  public_key: String
  title: String
  updated_at: timestamptz
  voteUsersBySubject: vote_user_arr_rel_insert_input
  vote_beacons: vote_beacon_arr_rel_insert_input
  vote_comments: vote_comment_arr_rel_insert_input
  vote_users: vote_user_arr_rel_insert_input
}

"""aggregate max on columns"""
type user_max_fields {
  created_at: timestamptz
  description: String
  id: String

  """
  A computed field, executes function "user_get_my_vote"
  """
  my_vote: Int
  public_key: String
  title: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type user_min_fields {
  created_at: timestamptz
  description: String
  id: String

  """
  A computed field, executes function "user_get_my_vote"
  """
  my_vote: Int
  public_key: String
  title: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
input type for inserting object relation for remote table "user"
"""
input user_obj_rel_insert_input {
  data: user_insert_input!

  """upsert condition"""
  on_conflict: user_on_conflict
}

"""
on_conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  beacon_hiddens_aggregate: beacon_hidden_aggregate_order_by
  beacon_pinneds_aggregate: beacon_pinned_aggregate_order_by
  beacons_aggregate: beacon_aggregate_order_by
  comments_aggregate: comment_aggregate_order_by
  created_at: order_by
  description: order_by
  has_picture: order_by
  id: order_by
  my_vote: order_by
  public_key: order_by
  title: order_by
  updated_at: order_by
  voteUsersBySubject_aggregate: vote_user_aggregate_order_by
  vote_beacons_aggregate: vote_beacon_aggregate_order_by
  vote_comments_aggregate: vote_comment_aggregate_order_by
  vote_users_aggregate: vote_user_aggregate_order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  id: String!
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  has_picture

  """column name"""
  id

  """column name"""
  public_key

  """column name"""
  title

  """column name"""
  updated_at
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  created_at: timestamptz
  description: String
  has_picture: Boolean
  id: String
  public_key: String
  title: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type user_stddev_fields {
  """
  A computed field, executes function "user_get_my_vote"
  """
  my_vote: Int
}

"""aggregate stddev_pop on columns"""
type user_stddev_pop_fields {
  """
  A computed field, executes function "user_get_my_vote"
  """
  my_vote: Int
}

"""aggregate stddev_samp on columns"""
type user_stddev_samp_fields {
  """
  A computed field, executes function "user_get_my_vote"
  """
  my_vote: Int
}

"""
Streaming cursor of the table "user"
"""
input user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_stream_cursor_value_input {
  created_at: timestamptz
  description: String
  has_picture: Boolean
  id: String
  public_key: String
  title: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type user_sum_fields {
  """
  A computed field, executes function "user_get_my_vote"
  """
  my_vote: Int
}

"""
update columns of table "user"
"""
enum user_update_column {
  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  has_picture

  """column name"""
  id

  """column name"""
  public_key

  """column name"""
  title

  """column name"""
  updated_at
}

input user_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: user_set_input

  """filter the rows which have to be updated"""
  where: user_bool_exp!
}

"""aggregate var_pop on columns"""
type user_var_pop_fields {
  """
  A computed field, executes function "user_get_my_vote"
  """
  my_vote: Int
}

"""aggregate var_samp on columns"""
type user_var_samp_fields {
  """
  A computed field, executes function "user_get_my_vote"
  """
  my_vote: Int
}

"""aggregate variance on columns"""
type user_variance_fields {
  """
  A computed field, executes function "user_get_my_vote"
  """
  my_vote: Int
}

"""
columns and relationships of "vote_beacon"
"""
type vote_beacon {
  amount: Int!

  """An object relationship"""
  beacon: beacon!
  created_at: timestamptz!
  object: String!
  subject: String!
  updated_at: timestamptz!

  """An object relationship"""
  user: user!
}

"""
aggregated selection of "vote_beacon"
"""
type vote_beacon_aggregate {
  aggregate: vote_beacon_aggregate_fields
  nodes: [vote_beacon!]!
}

input vote_beacon_aggregate_bool_exp {
  count: vote_beacon_aggregate_bool_exp_count
}

input vote_beacon_aggregate_bool_exp_count {
  arguments: [vote_beacon_select_column!]
  distinct: Boolean
  filter: vote_beacon_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "vote_beacon"
"""
type vote_beacon_aggregate_fields {
  avg: vote_beacon_avg_fields
  count(columns: [vote_beacon_select_column!], distinct: Boolean): Int!
  max: vote_beacon_max_fields
  min: vote_beacon_min_fields
  stddev: vote_beacon_stddev_fields
  stddev_pop: vote_beacon_stddev_pop_fields
  stddev_samp: vote_beacon_stddev_samp_fields
  sum: vote_beacon_sum_fields
  var_pop: vote_beacon_var_pop_fields
  var_samp: vote_beacon_var_samp_fields
  variance: vote_beacon_variance_fields
}

"""
order by aggregate values of table "vote_beacon"
"""
input vote_beacon_aggregate_order_by {
  avg: vote_beacon_avg_order_by
  count: order_by
  max: vote_beacon_max_order_by
  min: vote_beacon_min_order_by
  stddev: vote_beacon_stddev_order_by
  stddev_pop: vote_beacon_stddev_pop_order_by
  stddev_samp: vote_beacon_stddev_samp_order_by
  sum: vote_beacon_sum_order_by
  var_pop: vote_beacon_var_pop_order_by
  var_samp: vote_beacon_var_samp_order_by
  variance: vote_beacon_variance_order_by
}

"""
input type for inserting array relation for remote table "vote_beacon"
"""
input vote_beacon_arr_rel_insert_input {
  data: [vote_beacon_insert_input!]!

  """upsert condition"""
  on_conflict: vote_beacon_on_conflict
}

"""aggregate avg on columns"""
type vote_beacon_avg_fields {
  amount: Float
}

"""
order by avg() on columns of table "vote_beacon"
"""
input vote_beacon_avg_order_by {
  amount: order_by
}

"""
Boolean expression to filter rows from the table "vote_beacon". All fields are combined with a logical 'AND'.
"""
input vote_beacon_bool_exp {
  _and: [vote_beacon_bool_exp!]
  _not: vote_beacon_bool_exp
  _or: [vote_beacon_bool_exp!]
  amount: Int_comparison_exp
  beacon: beacon_bool_exp
  created_at: timestamptz_comparison_exp
  object: String_comparison_exp
  subject: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: user_bool_exp
}

"""
unique or primary key constraints on table "vote_beacon"
"""
enum vote_beacon_constraint {
  """
  unique or primary key constraint on columns "object", "subject"
  """
  vote_beacon_pkey
}

"""
input type for incrementing numeric columns in table "vote_beacon"
"""
input vote_beacon_inc_input {
  amount: Int
}

"""
input type for inserting data into table "vote_beacon"
"""
input vote_beacon_insert_input {
  amount: Int
  beacon: beacon_obj_rel_insert_input
  created_at: timestamptz
  object: String
  subject: String
  updated_at: timestamptz
  user: user_obj_rel_insert_input
}

"""aggregate max on columns"""
type vote_beacon_max_fields {
  amount: Int
  created_at: timestamptz
  object: String
  subject: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "vote_beacon"
"""
input vote_beacon_max_order_by {
  amount: order_by
  created_at: order_by
  object: order_by
  subject: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type vote_beacon_min_fields {
  amount: Int
  created_at: timestamptz
  object: String
  subject: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "vote_beacon"
"""
input vote_beacon_min_order_by {
  amount: order_by
  created_at: order_by
  object: order_by
  subject: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "vote_beacon"
"""
type vote_beacon_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [vote_beacon!]!
}

"""
on_conflict condition type for table "vote_beacon"
"""
input vote_beacon_on_conflict {
  constraint: vote_beacon_constraint!
  update_columns: [vote_beacon_update_column!]! = []
  where: vote_beacon_bool_exp
}

"""Ordering options when selecting data from "vote_beacon"."""
input vote_beacon_order_by {
  amount: order_by
  beacon: beacon_order_by
  created_at: order_by
  object: order_by
  subject: order_by
  updated_at: order_by
  user: user_order_by
}

"""primary key columns input for table: vote_beacon"""
input vote_beacon_pk_columns_input {
  object: String!
  subject: String!
}

"""
select columns of table "vote_beacon"
"""
enum vote_beacon_select_column {
  """column name"""
  amount

  """column name"""
  created_at

  """column name"""
  object

  """column name"""
  subject

  """column name"""
  updated_at
}

"""
input type for updating data in table "vote_beacon"
"""
input vote_beacon_set_input {
  amount: Int
  created_at: timestamptz
  object: String
  subject: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type vote_beacon_stddev_fields {
  amount: Float
}

"""
order by stddev() on columns of table "vote_beacon"
"""
input vote_beacon_stddev_order_by {
  amount: order_by
}

"""aggregate stddev_pop on columns"""
type vote_beacon_stddev_pop_fields {
  amount: Float
}

"""
order by stddev_pop() on columns of table "vote_beacon"
"""
input vote_beacon_stddev_pop_order_by {
  amount: order_by
}

"""aggregate stddev_samp on columns"""
type vote_beacon_stddev_samp_fields {
  amount: Float
}

"""
order by stddev_samp() on columns of table "vote_beacon"
"""
input vote_beacon_stddev_samp_order_by {
  amount: order_by
}

"""
Streaming cursor of the table "vote_beacon"
"""
input vote_beacon_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: vote_beacon_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input vote_beacon_stream_cursor_value_input {
  amount: Int
  created_at: timestamptz
  object: String
  subject: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type vote_beacon_sum_fields {
  amount: Int
}

"""
order by sum() on columns of table "vote_beacon"
"""
input vote_beacon_sum_order_by {
  amount: order_by
}

"""
update columns of table "vote_beacon"
"""
enum vote_beacon_update_column {
  """column name"""
  amount

  """column name"""
  created_at

  """column name"""
  object

  """column name"""
  subject

  """column name"""
  updated_at
}

input vote_beacon_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: vote_beacon_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: vote_beacon_set_input

  """filter the rows which have to be updated"""
  where: vote_beacon_bool_exp!
}

"""aggregate var_pop on columns"""
type vote_beacon_var_pop_fields {
  amount: Float
}

"""
order by var_pop() on columns of table "vote_beacon"
"""
input vote_beacon_var_pop_order_by {
  amount: order_by
}

"""aggregate var_samp on columns"""
type vote_beacon_var_samp_fields {
  amount: Float
}

"""
order by var_samp() on columns of table "vote_beacon"
"""
input vote_beacon_var_samp_order_by {
  amount: order_by
}

"""aggregate variance on columns"""
type vote_beacon_variance_fields {
  amount: Float
}

"""
order by variance() on columns of table "vote_beacon"
"""
input vote_beacon_variance_order_by {
  amount: order_by
}

"""
columns and relationships of "vote_comment"
"""
type vote_comment {
  amount: Int!

  """An object relationship"""
  comment: comment!
  created_at: timestamptz!
  object: String!
  subject: String!
  updated_at: timestamptz!

  """An object relationship"""
  user: user!
}

"""
aggregated selection of "vote_comment"
"""
type vote_comment_aggregate {
  aggregate: vote_comment_aggregate_fields
  nodes: [vote_comment!]!
}

input vote_comment_aggregate_bool_exp {
  count: vote_comment_aggregate_bool_exp_count
}

input vote_comment_aggregate_bool_exp_count {
  arguments: [vote_comment_select_column!]
  distinct: Boolean
  filter: vote_comment_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "vote_comment"
"""
type vote_comment_aggregate_fields {
  avg: vote_comment_avg_fields
  count(columns: [vote_comment_select_column!], distinct: Boolean): Int!
  max: vote_comment_max_fields
  min: vote_comment_min_fields
  stddev: vote_comment_stddev_fields
  stddev_pop: vote_comment_stddev_pop_fields
  stddev_samp: vote_comment_stddev_samp_fields
  sum: vote_comment_sum_fields
  var_pop: vote_comment_var_pop_fields
  var_samp: vote_comment_var_samp_fields
  variance: vote_comment_variance_fields
}

"""
order by aggregate values of table "vote_comment"
"""
input vote_comment_aggregate_order_by {
  avg: vote_comment_avg_order_by
  count: order_by
  max: vote_comment_max_order_by
  min: vote_comment_min_order_by
  stddev: vote_comment_stddev_order_by
  stddev_pop: vote_comment_stddev_pop_order_by
  stddev_samp: vote_comment_stddev_samp_order_by
  sum: vote_comment_sum_order_by
  var_pop: vote_comment_var_pop_order_by
  var_samp: vote_comment_var_samp_order_by
  variance: vote_comment_variance_order_by
}

"""
input type for inserting array relation for remote table "vote_comment"
"""
input vote_comment_arr_rel_insert_input {
  data: [vote_comment_insert_input!]!

  """upsert condition"""
  on_conflict: vote_comment_on_conflict
}

"""aggregate avg on columns"""
type vote_comment_avg_fields {
  amount: Float
}

"""
order by avg() on columns of table "vote_comment"
"""
input vote_comment_avg_order_by {
  amount: order_by
}

"""
Boolean expression to filter rows from the table "vote_comment". All fields are combined with a logical 'AND'.
"""
input vote_comment_bool_exp {
  _and: [vote_comment_bool_exp!]
  _not: vote_comment_bool_exp
  _or: [vote_comment_bool_exp!]
  amount: Int_comparison_exp
  comment: comment_bool_exp
  created_at: timestamptz_comparison_exp
  object: String_comparison_exp
  subject: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: user_bool_exp
}

"""
unique or primary key constraints on table "vote_comment"
"""
enum vote_comment_constraint {
  """
  unique or primary key constraint on columns "object", "subject"
  """
  vote_comment_pkey
}

"""
input type for incrementing numeric columns in table "vote_comment"
"""
input vote_comment_inc_input {
  amount: Int
}

"""
input type for inserting data into table "vote_comment"
"""
input vote_comment_insert_input {
  amount: Int
  comment: comment_obj_rel_insert_input
  created_at: timestamptz
  object: String
  subject: String
  updated_at: timestamptz
  user: user_obj_rel_insert_input
}

"""aggregate max on columns"""
type vote_comment_max_fields {
  amount: Int
  created_at: timestamptz
  object: String
  subject: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "vote_comment"
"""
input vote_comment_max_order_by {
  amount: order_by
  created_at: order_by
  object: order_by
  subject: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type vote_comment_min_fields {
  amount: Int
  created_at: timestamptz
  object: String
  subject: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "vote_comment"
"""
input vote_comment_min_order_by {
  amount: order_by
  created_at: order_by
  object: order_by
  subject: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "vote_comment"
"""
type vote_comment_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [vote_comment!]!
}

"""
on_conflict condition type for table "vote_comment"
"""
input vote_comment_on_conflict {
  constraint: vote_comment_constraint!
  update_columns: [vote_comment_update_column!]! = []
  where: vote_comment_bool_exp
}

"""Ordering options when selecting data from "vote_comment"."""
input vote_comment_order_by {
  amount: order_by
  comment: comment_order_by
  created_at: order_by
  object: order_by
  subject: order_by
  updated_at: order_by
  user: user_order_by
}

"""primary key columns input for table: vote_comment"""
input vote_comment_pk_columns_input {
  object: String!
  subject: String!
}

"""
select columns of table "vote_comment"
"""
enum vote_comment_select_column {
  """column name"""
  amount

  """column name"""
  created_at

  """column name"""
  object

  """column name"""
  subject

  """column name"""
  updated_at
}

"""
input type for updating data in table "vote_comment"
"""
input vote_comment_set_input {
  amount: Int
  created_at: timestamptz
  object: String
  subject: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type vote_comment_stddev_fields {
  amount: Float
}

"""
order by stddev() on columns of table "vote_comment"
"""
input vote_comment_stddev_order_by {
  amount: order_by
}

"""aggregate stddev_pop on columns"""
type vote_comment_stddev_pop_fields {
  amount: Float
}

"""
order by stddev_pop() on columns of table "vote_comment"
"""
input vote_comment_stddev_pop_order_by {
  amount: order_by
}

"""aggregate stddev_samp on columns"""
type vote_comment_stddev_samp_fields {
  amount: Float
}

"""
order by stddev_samp() on columns of table "vote_comment"
"""
input vote_comment_stddev_samp_order_by {
  amount: order_by
}

"""
Streaming cursor of the table "vote_comment"
"""
input vote_comment_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: vote_comment_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input vote_comment_stream_cursor_value_input {
  amount: Int
  created_at: timestamptz
  object: String
  subject: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type vote_comment_sum_fields {
  amount: Int
}

"""
order by sum() on columns of table "vote_comment"
"""
input vote_comment_sum_order_by {
  amount: order_by
}

"""
update columns of table "vote_comment"
"""
enum vote_comment_update_column {
  """column name"""
  amount

  """column name"""
  created_at

  """column name"""
  object

  """column name"""
  subject

  """column name"""
  updated_at
}

input vote_comment_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: vote_comment_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: vote_comment_set_input

  """filter the rows which have to be updated"""
  where: vote_comment_bool_exp!
}

"""aggregate var_pop on columns"""
type vote_comment_var_pop_fields {
  amount: Float
}

"""
order by var_pop() on columns of table "vote_comment"
"""
input vote_comment_var_pop_order_by {
  amount: order_by
}

"""aggregate var_samp on columns"""
type vote_comment_var_samp_fields {
  amount: Float
}

"""
order by var_samp() on columns of table "vote_comment"
"""
input vote_comment_var_samp_order_by {
  amount: order_by
}

"""aggregate variance on columns"""
type vote_comment_variance_fields {
  amount: Float
}

"""
order by variance() on columns of table "vote_comment"
"""
input vote_comment_variance_order_by {
  amount: order_by
}

"""
columns and relationships of "vote_user"
"""
type vote_user {
  amount: Int!
  created_at: timestamptz!
  object: String!
  subject: String!
  updated_at: timestamptz!

  """An object relationship"""
  user: user!

  """An object relationship"""
  userBySubject: user!
}

"""
aggregated selection of "vote_user"
"""
type vote_user_aggregate {
  aggregate: vote_user_aggregate_fields
  nodes: [vote_user!]!
}

input vote_user_aggregate_bool_exp {
  count: vote_user_aggregate_bool_exp_count
}

input vote_user_aggregate_bool_exp_count {
  arguments: [vote_user_select_column!]
  distinct: Boolean
  filter: vote_user_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "vote_user"
"""
type vote_user_aggregate_fields {
  avg: vote_user_avg_fields
  count(columns: [vote_user_select_column!], distinct: Boolean): Int!
  max: vote_user_max_fields
  min: vote_user_min_fields
  stddev: vote_user_stddev_fields
  stddev_pop: vote_user_stddev_pop_fields
  stddev_samp: vote_user_stddev_samp_fields
  sum: vote_user_sum_fields
  var_pop: vote_user_var_pop_fields
  var_samp: vote_user_var_samp_fields
  variance: vote_user_variance_fields
}

"""
order by aggregate values of table "vote_user"
"""
input vote_user_aggregate_order_by {
  avg: vote_user_avg_order_by
  count: order_by
  max: vote_user_max_order_by
  min: vote_user_min_order_by
  stddev: vote_user_stddev_order_by
  stddev_pop: vote_user_stddev_pop_order_by
  stddev_samp: vote_user_stddev_samp_order_by
  sum: vote_user_sum_order_by
  var_pop: vote_user_var_pop_order_by
  var_samp: vote_user_var_samp_order_by
  variance: vote_user_variance_order_by
}

"""
input type for inserting array relation for remote table "vote_user"
"""
input vote_user_arr_rel_insert_input {
  data: [vote_user_insert_input!]!

  """upsert condition"""
  on_conflict: vote_user_on_conflict
}

"""aggregate avg on columns"""
type vote_user_avg_fields {
  amount: Float
}

"""
order by avg() on columns of table "vote_user"
"""
input vote_user_avg_order_by {
  amount: order_by
}

"""
Boolean expression to filter rows from the table "vote_user". All fields are combined with a logical 'AND'.
"""
input vote_user_bool_exp {
  _and: [vote_user_bool_exp!]
  _not: vote_user_bool_exp
  _or: [vote_user_bool_exp!]
  amount: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  object: String_comparison_exp
  subject: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: user_bool_exp
  userBySubject: user_bool_exp
}

"""
unique or primary key constraints on table "vote_user"
"""
enum vote_user_constraint {
  """
  unique or primary key constraint on columns "object", "subject"
  """
  vote_user_pkey
}

"""
input type for incrementing numeric columns in table "vote_user"
"""
input vote_user_inc_input {
  amount: Int
}

"""
input type for inserting data into table "vote_user"
"""
input vote_user_insert_input {
  amount: Int
  created_at: timestamptz
  object: String
  subject: String
  updated_at: timestamptz
  user: user_obj_rel_insert_input
  userBySubject: user_obj_rel_insert_input
}

"""aggregate max on columns"""
type vote_user_max_fields {
  amount: Int
  created_at: timestamptz
  object: String
  subject: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "vote_user"
"""
input vote_user_max_order_by {
  amount: order_by
  created_at: order_by
  object: order_by
  subject: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type vote_user_min_fields {
  amount: Int
  created_at: timestamptz
  object: String
  subject: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "vote_user"
"""
input vote_user_min_order_by {
  amount: order_by
  created_at: order_by
  object: order_by
  subject: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "vote_user"
"""
type vote_user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [vote_user!]!
}

"""
on_conflict condition type for table "vote_user"
"""
input vote_user_on_conflict {
  constraint: vote_user_constraint!
  update_columns: [vote_user_update_column!]! = []
  where: vote_user_bool_exp
}

"""Ordering options when selecting data from "vote_user"."""
input vote_user_order_by {
  amount: order_by
  created_at: order_by
  object: order_by
  subject: order_by
  updated_at: order_by
  user: user_order_by
  userBySubject: user_order_by
}

"""primary key columns input for table: vote_user"""
input vote_user_pk_columns_input {
  object: String!
  subject: String!
}

"""
select columns of table "vote_user"
"""
enum vote_user_select_column {
  """column name"""
  amount

  """column name"""
  created_at

  """column name"""
  object

  """column name"""
  subject

  """column name"""
  updated_at
}

"""
input type for updating data in table "vote_user"
"""
input vote_user_set_input {
  amount: Int
  created_at: timestamptz
  object: String
  subject: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type vote_user_stddev_fields {
  amount: Float
}

"""
order by stddev() on columns of table "vote_user"
"""
input vote_user_stddev_order_by {
  amount: order_by
}

"""aggregate stddev_pop on columns"""
type vote_user_stddev_pop_fields {
  amount: Float
}

"""
order by stddev_pop() on columns of table "vote_user"
"""
input vote_user_stddev_pop_order_by {
  amount: order_by
}

"""aggregate stddev_samp on columns"""
type vote_user_stddev_samp_fields {
  amount: Float
}

"""
order by stddev_samp() on columns of table "vote_user"
"""
input vote_user_stddev_samp_order_by {
  amount: order_by
}

"""
Streaming cursor of the table "vote_user"
"""
input vote_user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: vote_user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input vote_user_stream_cursor_value_input {
  amount: Int
  created_at: timestamptz
  object: String
  subject: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type vote_user_sum_fields {
  amount: Int
}

"""
order by sum() on columns of table "vote_user"
"""
input vote_user_sum_order_by {
  amount: order_by
}

"""
update columns of table "vote_user"
"""
enum vote_user_update_column {
  """column name"""
  amount

  """column name"""
  created_at

  """column name"""
  object

  """column name"""
  subject

  """column name"""
  updated_at
}

input vote_user_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: vote_user_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: vote_user_set_input

  """filter the rows which have to be updated"""
  where: vote_user_bool_exp!
}

"""aggregate var_pop on columns"""
type vote_user_var_pop_fields {
  amount: Float
}

"""
order by var_pop() on columns of table "vote_user"
"""
input vote_user_var_pop_order_by {
  amount: order_by
}

"""aggregate var_samp on columns"""
type vote_user_var_samp_fields {
  amount: Float
}

"""
order by var_samp() on columns of table "vote_user"
"""
input vote_user_var_samp_order_by {
  amount: order_by
}

"""aggregate variance on columns"""
type vote_user_variance_fields {
  amount: Float
}

"""
order by variance() on columns of table "vote_user"
"""
input vote_user_variance_order_by {
  amount: order_by
}

